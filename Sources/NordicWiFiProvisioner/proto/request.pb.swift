// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: request.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

extension Proto {
    // If the compiler emits an error on this type, it is because this file
    // was generated by a version of the `protoc` Swift plug-in that is
    // incompatible with the version of SwiftProtobuf to which you are linking.
    // Please ensure that you are building against the same version of the API
    // that was used to generate this file.
    fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
        struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
        typealias Version = _2
    }
    
    /// Wi-Fi provisioning configuration for SET_CONFIG request.
    struct WifiConfig {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.
        
        var wifi: WifiInfo {
            get {return _wifi ?? WifiInfo()}
            set {_wifi = newValue}
        }
        /// Returns true if `wifi` has been explicitly set.
        var hasWifi: Bool {return self._wifi != nil}
        /// Clears the value of `wifi`. Subsequent reads from it will return its default value.
        mutating func clearWifi() {self._wifi = nil}
        
        /// Default: empty string
        var passphrase: Data {
            get {return _passphrase ?? Data()}
            set {_passphrase = newValue}
        }
        /// Returns true if `passphrase` has been explicitly set.
        var hasPassphrase: Bool {return self._passphrase != nil}
        /// Clears the value of `passphrase`. Subsequent reads from it will return its default value.
        mutating func clearPassphrase() {self._passphrase = nil}
        
        /// Should the Wi-Fi config be kept only in RAM and be removed after device reboot.
        var volatileMemory: Bool {
            get {return _volatileMemory ?? false}
            set {_volatileMemory = newValue}
        }
        /// Returns true if `volatileMemory` has been explicitly set.
        var hasVolatileMemory: Bool {return self._volatileMemory != nil}
        /// Clears the value of `volatileMemory`. Subsequent reads from it will return its default value.
        mutating func clearVolatileMemory() {self._volatileMemory = nil}
        
        var unknownFields = SwiftProtobuf.UnknownStorage()
        
        init() {}
        
        fileprivate var _wifi: WifiInfo? = nil
        fileprivate var _passphrase: Data? = nil
        fileprivate var _volatileMemory: Bool? = nil
    }
    
    /// The request type, sent to the device.
    struct Request {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.
        
        /// The op_code has to be optional, as new op codes may be added in the future.
        /// They would fail to be decoded in earlier versions, causing am error.
        /// With the optional modifier, they will be decoded as null.
        var opCode: OpCode {
            get {return _opCode ?? .reserved}
            set {_opCode = newValue}
        }
        /// Returns true if `opCode` has been explicitly set.
        var hasOpCode: Bool {return self._opCode != nil}
        /// Clears the value of `opCode`. Subsequent reads from it will return its default value.
        mutating func clearOpCode() {self._opCode = nil}
        
        /// The parameter for START_SCAN request.
        var scanParams: ScanParams {
            get {return _scanParams ?? ScanParams()}
            set {_scanParams = newValue}
        }
        /// Returns true if `scanParams` has been explicitly set.
        var hasScanParams: Bool {return self._scanParams != nil}
        /// Clears the value of `scanParams`. Subsequent reads from it will return its default value.
        mutating func clearScanParams() {self._scanParams = nil}
        
        /// The parameter for SET_CONFIG request.
        var config: WifiConfig {
            get {return _config ?? WifiConfig()}
            set {_config = newValue}
        }
        /// Returns true if `config` has been explicitly set.
        var hasConfig: Bool {return self._config != nil}
        /// Clears the value of `config`. Subsequent reads from it will return its default value.
        mutating func clearConfig() {self._config = nil}
        
        var unknownFields = SwiftProtobuf.UnknownStorage()
        
        init() {}
        
        fileprivate var _opCode: OpCode? = nil
        fileprivate var _scanParams: ScanParams? = nil
        fileprivate var _config: WifiConfig? = nil
    }
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Proto.WifiConfig: @unchecked Sendable {}
extension Proto.Request: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension Proto.WifiConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = "WifiConfig"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "wifi"),
        2: .same(proto: "passphrase"),
        3: .same(proto: "volatileMemory"),
    ]
    
    public var isInitialized: Bool {
        if let v = self._wifi, !v.isInitialized {return false}
        return true
    }
    
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try { try decoder.decodeSingularMessageField(value: &self._wifi) }()
            case 2: try { try decoder.decodeSingularBytesField(value: &self._passphrase) }()
            case 3: try { try decoder.decodeSingularBoolField(value: &self._volatileMemory) }()
            default: break
            }
        }
    }
    
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every if/case branch local when no optimizations
        // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
        // https://github.com/apple/swift-protobuf/issues/1182
        try { if let v = self._wifi {
            try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
        } }()
        try { if let v = self._passphrase {
            try visitor.visitSingularBytesField(value: v, fieldNumber: 2)
        } }()
        try { if let v = self._volatileMemory {
            try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
        } }()
        try unknownFields.traverse(visitor: &visitor)
    }
    
    static func ==(lhs: Proto.WifiConfig, rhs: Proto.WifiConfig) -> Bool {
        if lhs._wifi != rhs._wifi {return false}
        if lhs._passphrase != rhs._passphrase {return false}
        if lhs._volatileMemory != rhs._volatileMemory {return false}
        if lhs.unknownFields != rhs.unknownFields {return false}
        return true
    }
}

extension Proto.Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = "Request"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .standard(proto: "op_code"),
        10: .standard(proto: "scan_params"),
        11: .same(proto: "config"),
    ]
    
    public var isInitialized: Bool {
        if let v = self._config, !v.isInitialized {return false}
        return true
    }
    
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try { try decoder.decodeSingularEnumField(value: &self._opCode) }()
            case 10: try { try decoder.decodeSingularMessageField(value: &self._scanParams) }()
            case 11: try { try decoder.decodeSingularMessageField(value: &self._config) }()
            default: break
            }
        }
    }
    
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every if/case branch local when no optimizations
        // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
        // https://github.com/apple/swift-protobuf/issues/1182
        try { if let v = self._opCode {
            try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
        } }()
        try { if let v = self._scanParams {
            try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
        } }()
        try { if let v = self._config {
            try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
        } }()
        try unknownFields.traverse(visitor: &visitor)
    }
    
    static func ==(lhs: Proto.Request, rhs: Proto.Request) -> Bool {
        if lhs._opCode != rhs._opCode {return false}
        if lhs._scanParams != rhs._scanParams {return false}
        if lhs._config != rhs._config {return false}
        if lhs.unknownFields != rhs.unknownFields {return false}
        return true
    }
}
