// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: response.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

extension Proto {
    // If the compiler emits an error on this type, it is because this file
    // was generated by a version of the `protoc` Swift plug-in that is
    // incompatible with the version of SwiftProtobuf to which you are linking.
    // Please ensure that you are building against the same version of the API
    // that was used to generate this file.
    fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
        struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
        typealias Version = _2
    }
    
    /// Information about the Wi-Fi connected state.
    struct ConnectionInfo {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.
        
        var ip4Addr: Data {
            get {return _ip4Addr ?? Data()}
            set {_ip4Addr = newValue}
        }
        /// Returns true if `ip4Addr` has been explicitly set.
        var hasIp4Addr: Bool {return self._ip4Addr != nil}
        /// Clears the value of `ip4Addr`. Subsequent reads from it will return its default value.
        mutating func clearIp4Addr() {self._ip4Addr = nil}
        
        var unknownFields = SwiftProtobuf.UnknownStorage()
        
        init() {}
        
        fileprivate var _ip4Addr: Data? = nil
    }
    
    /// Response payload for GET_STATUS request.
    struct DeviceStatus {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.
        
        /// The current state of the Wifi connection.
        var state: ConnectionState {
            get {return _state ?? .disconnected}
            set {_state = newValue}
        }
        /// Returns true if `state` has been explicitly set.
        var hasState: Bool {return self._state != nil}
        /// Clears the value of `state`. Subsequent reads from it will return its default value.
        mutating func clearState() {self._state = nil}
        
        /// The network information if provisioned to a network.
        /// This can be set even if connection failed.
        var provisioningInfo: WifiInfo {
            get {return _provisioningInfo ?? WifiInfo()}
            set {_provisioningInfo = newValue}
        }
        /// Returns true if `provisioningInfo` has been explicitly set.
        var hasProvisioningInfo: Bool {return self._provisioningInfo != nil}
        /// Clears the value of `provisioningInfo`. Subsequent reads from it will return its default value.
        mutating func clearProvisioningInfo() {self._provisioningInfo = nil}
        
        /// The connection info is set when the device is connected
        /// to the network and received the IP.
        var connectionInfo: ConnectionInfo {
            get {return _connectionInfo ?? ConnectionInfo()}
            set {_connectionInfo = newValue}
        }
        /// Returns true if `connectionInfo` has been explicitly set.
        var hasConnectionInfo: Bool {return self._connectionInfo != nil}
        /// Clears the value of `connectionInfo`. Subsequent reads from it will return its default value.
        mutating func clearConnectionInfo() {self._connectionInfo = nil}
        
        /// Set if the device is scanning.
        /// The period_ms contains remaining scanning period.
        var scanInfo: ScanParams {
            get {return _scanInfo ?? ScanParams()}
            set {_scanInfo = newValue}
        }
        /// Returns true if `scanInfo` has been explicitly set.
        var hasScanInfo: Bool {return self._scanInfo != nil}
        /// Clears the value of `scanInfo`. Subsequent reads from it will return its default value.
        mutating func clearScanInfo() {self._scanInfo = nil}
        
        var unknownFields = SwiftProtobuf.UnknownStorage()
        
        init() {}
        
        fileprivate var _state: ConnectionState? = nil
        fileprivate var _provisioningInfo: WifiInfo? = nil
        fileprivate var _connectionInfo: ConnectionInfo? = nil
        fileprivate var _scanInfo: ScanParams? = nil
    }
    
    /// A response type which is sent back from the device.
    struct Response {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.
        
        /// Request op code.
        var requestOpCode: OpCode {
            get {return _requestOpCode ?? .reserved}
            set {_requestOpCode = newValue}
        }
        /// Returns true if `requestOpCode` has been explicitly set.
        var hasRequestOpCode: Bool {return self._requestOpCode != nil}
        /// Clears the value of `requestOpCode`. Subsequent reads from it will return its default value.
        mutating func clearRequestOpCode() {self._requestOpCode = nil}
        
        /// Status of the operation.
        var status: Status {
            get {return _status ?? .success}
            set {_status = newValue}
        }
        /// Returns true if `status` has been explicitly set.
        var hasStatus: Bool {return self._status != nil}
        /// Clears the value of `status`. Subsequent reads from it will return its default value.
        mutating func clearStatus() {self._status = nil}
        
        /// The device status is set as a response to GET_STATUS.
        var deviceStatus: DeviceStatus {
            get {return _deviceStatus ?? DeviceStatus()}
            set {_deviceStatus = newValue}
        }
        /// Returns true if `deviceStatus` has been explicitly set.
        var hasDeviceStatus: Bool {return self._deviceStatus != nil}
        /// Clears the value of `deviceStatus`. Subsequent reads from it will return its default value.
        mutating func clearDeviceStatus() {self._deviceStatus = nil}
        
        var unknownFields = SwiftProtobuf.UnknownStorage()
        
        init() {}
        
        fileprivate var _requestOpCode: OpCode? = nil
        fileprivate var _status: Status? = nil
        fileprivate var _deviceStatus: DeviceStatus? = nil
    }
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Proto.ConnectionInfo: @unchecked Sendable {}
extension Proto.DeviceStatus: @unchecked Sendable {}
extension Proto.Response: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension Proto.ConnectionInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = "ConnectionInfo"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .standard(proto: "ip4_addr"),
    ]
    
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try { try decoder.decodeSingularBytesField(value: &self._ip4Addr) }()
            default: break
            }
        }
    }
    
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every if/case branch local when no optimizations
        // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
        // https://github.com/apple/swift-protobuf/issues/1182
        try { if let v = self._ip4Addr {
            try visitor.visitSingularBytesField(value: v, fieldNumber: 1)
        } }()
        try unknownFields.traverse(visitor: &visitor)
    }
    
    static func ==(lhs: Proto.ConnectionInfo, rhs: Proto.ConnectionInfo) -> Bool {
        if lhs._ip4Addr != rhs._ip4Addr {return false}
        if lhs.unknownFields != rhs.unknownFields {return false}
        return true
    }
}

extension Proto.DeviceStatus: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = "DeviceStatus"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "state"),
        10: .standard(proto: "provisioning_info"),
        11: .standard(proto: "connection_info"),
        12: .standard(proto: "scan_info"),
    ]
    
    public var isInitialized: Bool {
        if let v = self._provisioningInfo, !v.isInitialized {return false}
        return true
    }
    
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try { try decoder.decodeSingularEnumField(value: &self._state) }()
            case 10: try { try decoder.decodeSingularMessageField(value: &self._provisioningInfo) }()
            case 11: try { try decoder.decodeSingularMessageField(value: &self._connectionInfo) }()
            case 12: try { try decoder.decodeSingularMessageField(value: &self._scanInfo) }()
            default: break
            }
        }
    }
    
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every if/case branch local when no optimizations
        // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
        // https://github.com/apple/swift-protobuf/issues/1182
        try { if let v = self._state {
            try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
        } }()
        try { if let v = self._provisioningInfo {
            try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
        } }()
        try { if let v = self._connectionInfo {
            try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
        } }()
        try { if let v = self._scanInfo {
            try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
        } }()
        try unknownFields.traverse(visitor: &visitor)
    }
    
    static func ==(lhs: Proto.DeviceStatus, rhs: Proto.DeviceStatus) -> Bool {
        if lhs._state != rhs._state {return false}
        if lhs._provisioningInfo != rhs._provisioningInfo {return false}
        if lhs._connectionInfo != rhs._connectionInfo {return false}
        if lhs._scanInfo != rhs._scanInfo {return false}
        if lhs.unknownFields != rhs.unknownFields {return false}
        return true
    }
}

extension Proto.Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = "Response"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .standard(proto: "request_op_code"),
        2: .same(proto: "status"),
        10: .standard(proto: "device_status"),
    ]
    
    public var isInitialized: Bool {
        if let v = self._deviceStatus, !v.isInitialized {return false}
        return true
    }
    
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try { try decoder.decodeSingularEnumField(value: &self._requestOpCode) }()
            case 2: try { try decoder.decodeSingularEnumField(value: &self._status) }()
            case 10: try { try decoder.decodeSingularMessageField(value: &self._deviceStatus) }()
            default: break
            }
        }
    }
    
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every if/case branch local when no optimizations
        // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
        // https://github.com/apple/swift-protobuf/issues/1182
        try { if let v = self._requestOpCode {
            try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
        } }()
        try { if let v = self._status {
            try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
        } }()
        try { if let v = self._deviceStatus {
            try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
        } }()
        try unknownFields.traverse(visitor: &visitor)
    }
    
    static func ==(lhs: Proto.Response, rhs: Proto.Response) -> Bool {
        if lhs._requestOpCode != rhs._requestOpCode {return false}
        if lhs._status != rhs._status {return false}
        if lhs._deviceStatus != rhs._deviceStatus {return false}
        if lhs.unknownFields != rhs.unknownFields {return false}
        return true
    }
}
