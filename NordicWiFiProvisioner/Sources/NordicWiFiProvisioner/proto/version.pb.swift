// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: version.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

extension Proto {
    // If the compiler emits an error on this type, it is because this file
    // was generated by a version of the `protoc` Swift plug-in that is
    // incompatible with the version of SwiftProtobuf to which you are linking.
    // Please ensure that you are building against the same version of the API
    // that was used to generate this file.
    fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
        struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
        typealias Version = _2
    }
    
    /// Response payload for returned from Version characteristic.
    struct Info {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.
        
        /// The fw version as integer.
        var version: UInt32 {
            get {return _version ?? 0}
            set {_version = newValue}
        }
        /// Returns true if `version` has been explicitly set.
        var hasVersion: Bool {return self._version != nil}
        /// Clears the value of `version`. Subsequent reads from it will return its default value.
        mutating func clearVersion() {self._version = nil}
        
        var unknownFields = SwiftProtobuf.UnknownStorage()
        
        init() {}
        
        fileprivate var _version: UInt32? = nil
    }
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Proto.Info: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension Proto.Info: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = "Info"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "version"),
    ]
    
    public var isInitialized: Bool {
        if self._version == nil {return false}
        return true
    }
    
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try { try decoder.decodeSingularUInt32Field(value: &self._version) }()
            default: break
            }
        }
    }
    
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every if/case branch local when no optimizations
        // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
        // https://github.com/apple/swift-protobuf/issues/1182
        try { if let v = self._version {
            try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
        } }()
        try unknownFields.traverse(visitor: &visitor)
    }
    
    static func ==(lhs: Proto.Info, rhs: Proto.Info) -> Bool {
        if lhs._version != rhs._version {return false}
        if lhs.unknownFields != rhs.unknownFields {return false}
        return true
    }
}

